{"ast":null,"code":"var _jsxFileName = \"/workspace/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport { useParams, useNavigate, Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UploadInterface({\n  onUploadComplete\n}) {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [uploadSpeed, setUploadSpeed] = useState(0);\n  const [uploadStartTime, setUploadStartTime] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [repoUuid, setRepoUuid] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [totalFrames, setTotalFrames] = useState(0);\n  const navigate = useNavigate();\n  const handleFileSelect = file => {\n    console.log('📂 File selected:', {\n      name: file === null || file === void 0 ? void 0 : file.name,\n      type: file === null || file === void 0 ? void 0 : file.type,\n      size: file === null || file === void 0 ? void 0 : file.size\n    });\n    if (file && file.type.startsWith('video/')) {\n      console.log('✅ Valid video file selected');\n      setSelectedFile(file);\n      setUploadStatus('');\n      // Automatically start upload when file is selected\n      handleUpload(file);\n    } else {\n      console.warn('❌ Invalid file type selected:', file === null || file === void 0 ? void 0 : file.type);\n      setUploadStatus('Please select a valid video file.');\n      setSelectedFile(null);\n    }\n  };\n  const handleFileInputChange = e => {\n    console.log('🖱️ File input change event');\n    const file = e.target.files[0];\n    handleFileSelect(file);\n  };\n  const handleUpload = useCallback(async file => {\n    if (!file) return;\n    console.log(`🚀 Starting upload for file: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);\n    const startTime = Date.now();\n    setUploadStatus('Uploading...');\n    setUploadProgress(0);\n    setUploadSpeed('');\n    setIsUploading(true);\n    const formData = new FormData();\n    formData.append('file', file);\n    const xhr = new XMLHttpRequest();\n    xhr.upload.addEventListener('progress', event => {\n      if (event.lengthComputable) {\n        const percentComplete = event.loaded / event.total * 100;\n        const elapsed = (Date.now() - startTime) / 1000;\n        const speed = (event.loaded / 1024 / 1024 / elapsed).toFixed(2);\n        console.log(`📤 Upload progress: ${percentComplete.toFixed(1)}% (${speed} MB/s)`);\n        setUploadProgress(percentComplete);\n        setUploadSpeed(`${speed} MB/s`);\n\n        // Just log progress, don't navigate yet - wait for server response\n        if (percentComplete >= 100) {\n          console.log(`🚀 Upload reached 100% - waiting for server response...`);\n          setUploadStatus('Upload complete! Processing...');\n        }\n      }\n    });\n    xhr.addEventListener('load', () => {\n      const uploadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.log(`✅ Upload completed in ${uploadTime}s`);\n      console.log(`📡 Response status: ${xhr.status}`);\n      console.log(`📡 Response headers:`, xhr.getAllResponseHeaders());\n      if (xhr.status === 200) {\n        console.log(`📄 Raw response text:`, xhr.responseText);\n        try {\n          const response = JSON.parse(xhr.responseText);\n          console.log(`🎯 Parsed response:`, response);\n          console.log(`🎯 Backend assigned UUID: ${response.uuid}`);\n\n          // Navigate directly to frames view with the UUID from server\n          console.log(`🔄 Navigating to frames view: /${response.uuid}`);\n          setRepoUuid(response.uuid);\n          navigate(`/${response.uuid}`);\n\n          // Call the upload complete callback with response data\n          if (onUploadComplete) {\n            onUploadComplete(response);\n          }\n          setUploadStatus('Upload successful! Navigating to frames page...');\n          setIsUploading(false);\n          setUploadProgress(100);\n          setUploadSpeed('');\n        } catch (parseError) {\n          console.error(`❌ Failed to parse response JSON:`, parseError);\n          console.error(`❌ Raw response was:`, xhr.responseText);\n          setUploadStatus('Upload failed! Invalid server response');\n          setIsUploading(false);\n        }\n      } else {\n        console.error(`❌ Upload failed with status ${xhr.status}: ${xhr.responseText}`);\n        console.error(`❌ Response headers:`, xhr.getAllResponseHeaders());\n        setUploadStatus('Upload failed!');\n        setIsUploading(false);\n      }\n    });\n    xhr.addEventListener('error', () => {\n      const uploadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.error(`💥 Upload error after ${uploadTime}s: Network error`);\n      setUploadStatus('Upload failed! Network error');\n      setIsUploading(false);\n    });\n    xhr.addEventListener('timeout', () => {\n      const uploadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.error(`⏰ Upload timeout after ${uploadTime}s`);\n      setUploadStatus('Upload failed! Timeout');\n      setIsUploading(false);\n    });\n    xhr.open('POST', 'http://localhost:8500/video_upload');\n    xhr.timeout = 600000; // 10 minutes\n    console.log(`🌐 Sending request to backend...`);\n    xhr.send(formData);\n  }, []);\n  const handleDrop = e => {\n    e.preventDefault();\n    console.log('📥 File dropped');\n    const file = e.dataTransfer.files[0];\n    handleFileSelect(file);\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    console.log('📤 File drag over');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Remove this Flash \\u26A1\\uD83C\\uDFA5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: \"Upload a video to remove flash and replace individual frames using AI.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `upload-area ${selectedFile ? 'has-file' : ''} ${isUploading ? 'uploading' : ''}`,\n        onDrop: handleDrop,\n        onDragOver: handleDragOver,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"video/*\",\n          onChange: handleFileInputChange,\n          id: \"file-input\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file-input\",\n          className: \"upload-label\",\n          children: selectedFile ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Selected: \", selectedFile.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"file-info\",\n              children: [\"Size: \", formatFileSize(selectedFile.size)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), isUploading && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"upload-status\",\n              children: \"Uploading automatically...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 33\n            }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"processing-status\",\n              children: \"Processing video...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 34\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD83D\\uDCC1 Drop video file here or click to select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"upload-hint\",\n              children: \"Upload starts automatically when video is selected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), isUploading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-progress\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-bar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${uploadProgress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: uploadStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this), uploadSpeed && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"upload-speed\",\n          children: [\"Speed: \", uploadSpeed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processing-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: processingStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"processing-hint\",\n          children: \"This may take several minutes for large videos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), uploadStatus && !isUploading && !isProcessing && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"upload-status\",\n        children: uploadStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadInterface, \"8M6WaRHVaC924v5OUdTeKVg6/7o=\", false, function () {\n  return [useNavigate];\n});\n_c = UploadInterface;\nfunction formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nfunction FrameDisplay({\n  setDecompositionTask,\n  setPollDecompositionStatus,\n  decompositionTask: parentDecompositionTask,\n  setRecompositionTask,\n  setPollRecompositionStatus,\n  recompositionTask: parentRecompositionTask\n}) {\n  _s2();\n  const {\n    repoUuid\n  } = useParams();\n  const navigate = useNavigate();\n  console.log(`🎬 FrameDisplay component initialized`);\n  console.log(`🎬 repoUuid from params:`, repoUuid);\n  const [frames, setFrames] = useState([]);\n  const [frameNumbers, setFrameNumbers] = useState([]);\n  const [selectedFrames, setSelectedFrames] = useState(new Set());\n  const [bannerCollapsed, setBannerCollapsed] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalFrames, setTotalFrames] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(true);\n  const [lastDirModTime, setLastDirModTime] = useState(null);\n  const [lastKnownFrameCount, setLastKnownFrameCount] = useState(0);\n  const [lastKnownFrameNames, setLastKnownFrameNames] = useState('');\n  const [videoInfo, setVideoInfo] = useState(null);\n  const [runningTasks, setRunningTasks] = useState([]); // Changed to array for multiple tasks\n  const [forceRefreshCounter, setForceRefreshCounter] = useState(0); // Force refresh trigger\n  const [cacheBuster, setCacheBuster] = useState(Date.now()); // Cache buster for images\n\n  const framesPerPage = 20;\n\n  // Memoize the frame cache to avoid unnecessary re-renders\n  const frameCache = useMemo(() => new Map(), []);\n\n  // Handle frame selection\n  const toggleFrameSelection = useCallback(frameNumber => {\n    setSelectedFrames(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(frameNumber)) {\n        newSet.delete(frameNumber);\n      } else {\n        newSet.add(frameNumber);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Get selected frame numbers as sorted array\n  const selectedFrameNumbers = useMemo(() => {\n    return Array.from(selectedFrames).sort((a, b) => a - b);\n  }, [selectedFrames]);\n\n  // Handle 'pending' case - wait for actual UUID\n  useEffect(() => {\n    if (repoUuid === 'pending') {\n      console.log(`⏳ Waiting for actual UUID to be assigned...`);\n      setLoading(true);\n    }\n  }, [repoUuid]);\n  const fetchTotalFrames = useCallback(async uuid => {\n    try {\n      const response = await fetch(`http://localhost:8500/ls/${uuid}/?start=0&end=0`);\n      if (response.ok) {\n        const data = await response.json();\n        setTotalFrames(data.frames.total);\n      }\n    } catch (err) {\n      console.error('Failed to get total frames count:', err);\n    }\n  }, []);\n  const fetchVideoInfo = useCallback(async uuid => {\n    try {\n      const response = await fetch(`http://localhost:8500/static/${uuid}/video_info.json`);\n      if (response.ok) {\n        const data = await response.json();\n        setVideoInfo(data);\n      }\n    } catch (err) {\n      console.error('Failed to get video info:', err);\n    }\n  }, []);\n  const checkProcessingStatus = useCallback(async uuid => {\n    if (!uuid) return;\n    try {\n      console.log(`🔍 Checking processing status for ${uuid}...`);\n      const response = await fetch(`http://localhost:8500/${uuid}/status`);\n      const data = await response.json();\n      console.log(`📊 Processing status: ${JSON.stringify(data)}`);\n      if (data.processing_complete) {\n        console.log(`🎉 Video processing completed! Found ${data.frame_count} frames`);\n        setIsProcessing(false);\n        setProcessingStatus('Processing complete!');\n      } else {\n        // Check if we have a decomposition task running\n        if (parentDecompositionTask && parentDecompositionTask.status === 'processing') {\n          console.log(`⏳ Decomposition in progress... (${data.frame_count} frames, metadata: ${data.has_metadata})`);\n          setProcessingStatus(`Decomposing video... (${data.frame_count} frames available)`);\n          setIsProcessing(true);\n        } else {\n          console.log(`⏳ Still processing... (${data.frame_count} frames, metadata: ${data.has_metadata})`);\n          setProcessingStatus(`Processing video... (${data.frame_count} frames available)`);\n          setIsProcessing(true);\n        }\n      }\n    } catch (error) {\n      console.error(`❌ Error checking processing status: ${error}`);\n      setProcessingStatus('Error checking status');\n    }\n  }, [parentDecompositionTask]);\n  const loadFrames = useCallback(async uuid => {\n    if (!uuid) {\n      console.log(`❌ loadFrames called with no UUID`);\n      return;\n    }\n    try {\n      console.log(`🖼️ Loading frames for ${uuid}, page ${currentPage}...`);\n      setLoading(true);\n      const startTime = Date.now();\n\n      // Calculate pagination\n      const start = (currentPage - 1) * framesPerPage;\n      const end = start + framesPerPage - 1;\n      console.log(`📄 Fetching frames from ${start} to ${end}...`);\n      const response = await fetch(`http://localhost:8500/ls/${uuid}/?start=${start}&end=${end}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log(`📊 Response data:`, data);\n\n      // Use the raw frame paths directly (skip video_info.json and audio.wav)\n      const framePaths = data.filenames.filter(filename => filename.includes('frame_') && filename.endsWith('.jpg'));\n      const loadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.log(`✅ Loaded ${framePaths.length} frames in ${loadTime}s`);\n      console.log(`📊 Setting frames state: ${framePaths.length} frames`);\n      setFrames(framePaths);\n      setFrameNumbers(data.frames.numbers);\n      setLoading(false);\n      setLastUpdate(new Date());\n      console.log(`✅ Frame state updated successfully`);\n\n      // Set baseline frame count and names  \n      setLastKnownFrameCount(data.frames.total);\n      setLastKnownFrameNames(JSON.stringify(data));\n\n      // Update total frame count from the response\n      console.log(`📊 Total frames from backend: ${data.frames.total}`);\n      setTotalFrames(data.frames.total);\n    } catch (error) {\n      console.error(`❌ Error loading frames: ${error}`);\n      setError('Failed to load frames: ' + error.message);\n      setLoading(false);\n    }\n  }, [currentPage, framesPerPage]);\n  const checkForChanges = useCallback(async uuid => {\n    if (!uuid) return false;\n    try {\n      console.log(`🔍 Checking for changes by comparing API response...`);\n\n      // Calculate current page frame range\n      const start = (currentPage - 1) * framesPerPage;\n      const end = start + framesPerPage - 1;\n      const response = await fetch(`http://localhost:8500/ls/${uuid}/?start=${start}&end=${end}`);\n      if (response.ok) {\n        const data = await response.json();\n\n        // Simple comparison: stringify the entire response\n        const currentResponse = JSON.stringify(data);\n        console.log(`📊 Response size: ${currentResponse.length} chars`);\n        if (lastKnownFrameNames && lastKnownFrameNames !== currentResponse) {\n          console.log(`🔄 API response changed!`);\n          setLastKnownFrameNames(currentResponse);\n          return true;\n        } else if (!lastKnownFrameNames) {\n          console.log(`📅 First load - setting baseline response`);\n          setLastKnownFrameNames(currentResponse);\n        } else {\n          console.log(`✅ No changes detected - response identical`);\n        }\n      }\n    } catch (error) {\n      console.error(`❌ Error checking for changes: ${error}`);\n    }\n    return false;\n  }, [lastKnownFrameNames, currentPage, framesPerPage]);\n\n  // Add a global function to reset baseline (for debugging)\n  useEffect(() => {\n    window.resetBaseline = () => {\n      setLastKnownFrameNames(null);\n      console.log('🔄 Baseline reset - next check will set new baseline');\n    };\n  }, []);\n\n  // Pagination functions\n  const goToPage = useCallback(page => {\n    setCurrentPage(page);\n  }, []);\n  const goToNextPage = useCallback(() => {\n    if (currentPage < Math.ceil(totalFrames / framesPerPage)) {\n      goToPage(currentPage + 1);\n    }\n  }, [currentPage, totalFrames, framesPerPage, goToPage]);\n  const goToPrevPage = useCallback(() => {\n    if (currentPage > 1) {\n      goToPage(currentPage - 1);\n    }\n  }, [currentPage, goToPage]);\n\n  // Function to poll individual task status\n  const pollTaskStatus = useCallback(async (taskId, repoUuid) => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await fetch(`http://localhost:8500/api/tasks/${taskId}/status`);\n        if (response.ok) {\n          const statusData = await response.json();\n          setRunningTasks(prev => prev.map(task => {\n            if (task.id === taskId) {\n              if (statusData.status === 'completed') {\n                console.log(`✅ Task ${taskId} completed successfully!`);\n\n                // Trigger page refresh since new frames were created\n                console.log('🔄 Triggering page refresh due to completed interpolation');\n                setForceRefreshCounter(prev => prev + 1);\n                setCacheBuster(Date.now());\n                loadFrames(repoUuid);\n                fetchTotalFrames(repoUuid);\n\n                // Mark as completed and schedule removal\n                setTimeout(() => {\n                  setRunningTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\n                }, 15000); // Remove after 15 seconds\n\n                clearInterval(pollInterval);\n                return {\n                  ...task,\n                  status: 'completed',\n                  result: statusData.result\n                };\n              } else if (statusData.status === 'failed') {\n                console.error(`❌ Task ${taskId} failed:`, statusData.error);\n                clearInterval(pollInterval);\n\n                // Remove failed task after 5 seconds\n                setTimeout(() => {\n                  setRunningTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\n                }, 5000);\n                return {\n                  ...task,\n                  status: 'failed',\n                  error: statusData.error\n                };\n              } else if (statusData.status === 'processing') {\n                return {\n                  ...task,\n                  status: 'processing',\n                  progress: statusData.progress\n                };\n              }\n            }\n            return task;\n          }));\n        }\n      } catch (error) {\n        console.error(`Error polling task ${taskId}:`, error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup after 5 minutes\n    setTimeout(() => clearInterval(pollInterval), 300000);\n  }, [loadFrames, fetchTotalFrames]);\n\n  // Function to poll decomposition task status\n  const pollDecompositionStatus = useCallback(async (taskId, repoUuid) => {\n    console.log(`🔍 Starting to poll decomposition task: ${taskId}`);\n    const pollInterval = setInterval(async () => {\n      try {\n        console.log(`🔍 Polling decomposition task: ${taskId}`);\n        const response = await fetch(`http://localhost:8500/api/tasks/${taskId}/status`);\n        if (response.ok) {\n          const statusData = await response.json();\n          console.log(`🔍 Decomposition task status: ${JSON.stringify(statusData)}`);\n          setDecompositionTask(prev => {\n            console.log(`🔍 Updating decomposition task state. Current: ${JSON.stringify(prev)}, New status: ${statusData.status}`);\n            if (prev && prev.id === taskId) {\n              if (statusData.status === 'completed') {\n                console.log(`✅ Decomposition task ${taskId} completed successfully!`);\n\n                // Trigger page refresh since frames were extracted\n                console.log('🔄 Triggering page refresh due to completed decomposition');\n                setForceRefreshCounter(prev => prev + 1);\n                setCacheBuster(Date.now());\n                loadFrames(repoUuid);\n                fetchTotalFrames(repoUuid);\n                checkProcessingStatus(repoUuid);\n\n                // Mark as completed and schedule removal\n                setTimeout(() => {\n                  setDecompositionTask(null);\n                }, 15000); // Remove after 15 seconds\n\n                clearInterval(pollInterval);\n                return {\n                  ...prev,\n                  status: 'completed',\n                  result: statusData.result\n                };\n              } else if (statusData.status === 'failed') {\n                console.error(`❌ Decomposition task ${taskId} failed:`, statusData.error);\n                clearInterval(pollInterval);\n\n                // Remove failed task after 5 seconds\n                setTimeout(() => {\n                  setDecompositionTask(null);\n                }, 5000);\n                return {\n                  ...prev,\n                  status: 'failed',\n                  error: statusData.error\n                };\n              } else if (statusData.status === 'processing') {\n                return {\n                  ...prev,\n                  status: 'processing',\n                  progress: statusData.progress\n                };\n              }\n            }\n            return prev;\n          });\n        }\n      } catch (error) {\n        console.error(`Error polling decomposition task ${taskId}:`, error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup after 5 minutes\n    setTimeout(() => clearInterval(pollInterval), 300000);\n  }, [loadFrames, fetchTotalFrames, checkProcessingStatus, setDecompositionTask]);\n\n  // Function to poll recomposition task status\n  const pollRecompositionStatus = useCallback(async (taskId, repoUuid) => {\n    console.log(`🔍 Starting to poll recomposition task: ${taskId}`);\n    const pollInterval = setInterval(async () => {\n      try {\n        console.log(`🔍 Polling recomposition task: ${taskId}`);\n        const response = await fetch(`http://localhost:8500/api/tasks/${taskId}/status`);\n        if (response.ok) {\n          const statusData = await response.json();\n          console.log(`🔍 Recomposition task status: ${JSON.stringify(statusData)}`);\n          setRecompositionTask(prev => {\n            console.log(`🔍 Updating recomposition task state. Current: ${JSON.stringify(prev)}, New status: ${statusData.status}`);\n            if (prev && prev.id === taskId) {\n              if (statusData.status === 'completed') {\n                console.log(`✅ Recomposition task ${taskId} completed successfully!`);\n\n                // Trigger download of the completed video\n                console.log('📥 Triggering video download...');\n                downloadCompletedVideo(repoUuid, statusData.result.output_video_path);\n\n                // Mark as completed and schedule removal\n                setTimeout(() => {\n                  setRecompositionTask(null);\n                }, 15000); // Remove after 15 seconds\n\n                clearInterval(pollInterval);\n                return {\n                  ...prev,\n                  status: 'completed',\n                  result: statusData.result\n                };\n              } else if (statusData.status === 'failed') {\n                console.error(`❌ Recomposition task ${taskId} failed:`, statusData.error);\n                clearInterval(pollInterval);\n\n                // Remove failed task after 5 seconds\n                setTimeout(() => {\n                  setRecompositionTask(null);\n                }, 5000);\n                return {\n                  ...prev,\n                  status: 'failed',\n                  error: statusData.error\n                };\n              } else if (statusData.status === 'processing') {\n                return {\n                  ...prev,\n                  status: 'processing',\n                  progress: statusData.progress\n                };\n              }\n            }\n            return prev;\n          });\n        }\n      } catch (error) {\n        console.error(`Error polling recomposition task ${taskId}:`, error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup after 5 minutes\n    setTimeout(() => clearInterval(pollInterval), 300000);\n  }, [setRecompositionTask]);\n\n  // Pass the polling function back to parent\n  useEffect(() => {\n    if (setPollDecompositionStatus) {\n      setPollDecompositionStatus(() => pollDecompositionStatus);\n    }\n  }, [pollDecompositionStatus, setPollDecompositionStatus]);\n\n  // Pass the recomposition polling function back to parent\n  useEffect(() => {\n    if (setPollRecompositionStatus) {\n      setPollRecompositionStatus(() => pollRecompositionStatus);\n    }\n  }, [pollRecompositionStatus, setPollRecompositionStatus]);\n  const downloadVideo = useCallback(async uuid => {\n    try {\n      console.log(`📥 Starting video download for ${uuid}`);\n\n      // Set recomposition task state\n      setRecompositionTask({\n        id: `temp-${Date.now()}`,\n        status: 'submitting',\n        startTime: Date.now()\n      });\n\n      // Start video recomposition\n      const response = await fetch(`http://localhost:8500/api/recompose/${uuid}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          output_filename: `processed_video_${uuid}.mp4`\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        console.log('✅ Video recomposition started:', result);\n\n        // Update task with real ID and start polling\n        setRecompositionTask(prev => ({\n          ...prev,\n          id: result.task_id,\n          status: 'processing'\n        }));\n\n        // Start polling for recomposition completion\n        if (pollRecompositionStatus) {\n          pollRecompositionStatus(result.task_id, uuid);\n        }\n      } else {\n        const error = await response.text();\n        console.error('❌ Failed to start video recomposition:', error);\n        alert(`Failed to start video download: ${error}`);\n        setRecompositionTask(null);\n      }\n    } catch (error) {\n      console.error('❌ Error downloading video:', error);\n      alert(`Error downloading video: ${error.message}`);\n      setRecompositionTask(null);\n    }\n  }, [pollRecompositionStatus]);\n  const downloadCompletedVideo = useCallback(async (uuid, videoPath, retryCount = 0) => {\n    const maxRetries = 30; // Maximum 60 seconds of retrying (30 * 2 seconds)\n\n    try {\n      console.log(`📥 Checking if video file is available: ${videoPath} (attempt ${retryCount + 1}/${maxRetries + 1})`);\n\n      // First check if the file exists using a GET request but abort immediately\n      const checkUrl = `http://localhost:8500/${videoPath}`;\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 1000); // Abort after 1 second\n\n      try {\n        const checkResponse = await fetch(checkUrl, {\n          method: 'GET',\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        if (!checkResponse.ok) {\n          if (retryCount >= maxRetries) {\n            console.error(`❌ Video file not available after ${maxRetries} attempts, giving up`);\n            alert(`Video download failed: File not available after 60 seconds. Please try again.`);\n            return;\n          }\n          console.log(`⏳ Video file not yet available (${checkResponse.status}), retrying in 2 seconds...`);\n          // Retry after 2 seconds\n          setTimeout(() => downloadCompletedVideo(uuid, videoPath, retryCount + 1), 2000);\n          return;\n        }\n      } catch (error) {\n        clearTimeout(timeoutId);\n        if (error.name === 'AbortError') {\n          // Request was aborted, assume file doesn't exist yet\n          if (retryCount >= maxRetries) {\n            console.error(`❌ Video file not available after ${maxRetries} attempts, giving up`);\n            alert(`Video download failed: File not available after 60 seconds. Please try again.`);\n            return;\n          }\n          console.log(`⏳ Video file not yet available (request timeout), retrying in 2 seconds...`);\n          setTimeout(() => downloadCompletedVideo(uuid, videoPath, retryCount + 1), 2000);\n          return;\n        }\n        throw error; // Re-throw other errors\n      }\n      console.log(`✅ Video file is available, starting download...`);\n\n      // Create a download link\n      const downloadUrl = `http://localhost:8500/${videoPath}`;\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = `processed_video_${uuid}.mp4`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      console.log('✅ Video download initiated');\n    } catch (error) {\n      console.error('❌ Error downloading completed video:', error);\n      if (retryCount >= maxRetries) {\n        console.error(`❌ Download failed after ${maxRetries} attempts, giving up`);\n        alert(`Video download failed after multiple attempts. Please try again.`);\n        return;\n      }\n      // Retry after 2 seconds on any error\n      setTimeout(() => downloadCompletedVideo(uuid, videoPath, retryCount + 1), 2000);\n    }\n  }, []);\n\n  // Start polling for decomposition task if it exists and polling function is available\n  useEffect(() => {\n    if (parentDecompositionTask && parentDecompositionTask.status === 'processing' && pollDecompositionStatus) {\n      console.log(`🔄 Starting polling for existing decomposition task: ${parentDecompositionTask.id}`);\n      pollDecompositionStatus(parentDecompositionTask.id, repoUuid);\n    }\n  }, [parentDecompositionTask, pollDecompositionStatus, repoUuid]);\n\n  // Check if decomposition task is already completed when component loads\n  useEffect(() => {\n    if (parentDecompositionTask && parentDecompositionTask.status === 'processing' && repoUuid) {\n      console.log(`🔍 Checking if decomposition task is already completed: ${parentDecompositionTask.id}`);\n      fetch(`http://localhost:8500/api/tasks/${parentDecompositionTask.id}/status`).then(response => response.json()).then(statusData => {\n        console.log(`🔍 Initial task status check: ${JSON.stringify(statusData)}`);\n        if (statusData.status === 'completed') {\n          console.log(`✅ Decomposition task was already completed!`);\n          setDecompositionTask(prev => ({\n            ...prev,\n            status: 'completed',\n            result: statusData.result\n          }));\n          // Auto-dismiss after 15 seconds\n          setTimeout(() => {\n            setDecompositionTask(null);\n          }, 15000);\n        }\n      }).catch(error => {\n        console.error(`❌ Error checking initial task status: ${error}`);\n      });\n    }\n  }, [parentDecompositionTask, repoUuid]);\n\n  // Load video info immediately when component mounts\n  useEffect(() => {\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`📹 Loading video info for repo: ${repoUuid}`);\n      fetchVideoInfo(repoUuid);\n    }\n  }, [repoUuid, fetchVideoInfo]);\n\n  // Load frames when page changes or force refresh triggered\n  useEffect(() => {\n    console.log(`🎬 useEffect triggered with repoUuid: ${repoUuid}`);\n    console.log(`🎬 Current page: ${currentPage}`);\n    console.log(`🎬 Force refresh counter: ${forceRefreshCounter}`);\n    console.log(`🎬 Is processing: ${isProcessing}`);\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`🎬 Loading frames for repo: ${repoUuid}`);\n      loadFrames(repoUuid);\n    } else if (repoUuid === 'pending') {\n      console.log(`⏳ Skipping frame load - waiting for actual UUID`);\n    } else {\n      console.log(`❌ No repoUuid available for frame loading`);\n    }\n  }, [repoUuid, currentPage, forceRefreshCounter, loadFrames]);\n\n  // Check processing status periodically\n  useEffect(() => {\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`🔍 useEffect triggered - checking processing status for repo: ${repoUuid}`);\n      console.log(`🔍 Is processing: ${isProcessing}`);\n\n      // Check processing status once when component loads\n      checkProcessingStatus(repoUuid);\n    } else if (repoUuid === 'pending') {\n      console.log(`⏳ Skipping processing status check - waiting for actual UUID`);\n    } else {\n      console.log(`❌ No repoUuid available for processing status check`);\n    }\n  }, [repoUuid, checkProcessingStatus]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`🔄 Auto-refresh useEffect triggered`);\n      console.log(`🔄 repoUuid: ${repoUuid}`);\n      console.log(`🔄 isProcessing: ${isProcessing}`);\n      console.log(`🔄 Setting up auto-refresh interval (5 seconds)`);\n      const interval = setInterval(async () => {\n        console.log(`🔄 Auto-refresh: checking for changes...`);\n        console.log(`🔄 Current time: ${new Date().toISOString()}`);\n        console.log(`🔄 repoUuid: ${repoUuid}`);\n        console.log(`🔄 lastDirModTime: ${lastDirModTime ? new Date(lastDirModTime).toISOString() : 'None'}`);\n\n        // Check for changes using modification times\n        const hasChanges = await checkForChanges(repoUuid);\n        if (hasChanges) {\n          console.log(`🔄 Changes detected! Triggering refresh...`);\n          console.log(`🔄 Updating lastUpdate timestamp...`);\n          setForceRefreshCounter(prev => prev + 1);\n          setCacheBuster(Date.now());\n          setLastUpdate(new Date());\n          // Check processing status and total frame count\n          checkProcessingStatus(repoUuid);\n          fetchTotalFrames(repoUuid);\n          fetchVideoInfo(repoUuid);\n          // Reload frames for current page\n          loadFrames(repoUuid);\n        } else {\n          console.log(`✅ No changes detected, skipping refresh`);\n        }\n      }, 2500); // Check every 2.5 seconds\n\n      console.log(`🔄 Auto-refresh interval set up successfully`);\n      return () => {\n        console.log(`🔄 Cleaning up auto-refresh interval`);\n        clearInterval(interval);\n      };\n    } else if (repoUuid === 'pending') {\n      console.log(`⏳ Auto-refresh not started - waiting for actual UUID`);\n    } else {\n      console.log(`⏸️ Auto-refresh not enabled - no repoUuid`);\n      console.log(`⏸️ repoUuid: ${repoUuid}`);\n    }\n  }, [repoUuid, checkProcessingStatus, loadFrames, fetchTotalFrames, fetchVideoInfo, checkForChanges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Remove this Flash \\u26A1\\uD83C\\uDFA5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 894,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"description\",\n        children: \"The AI solution to remove flash from videos and replace individual frames in videos.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"repo-info\",\n        children: [\"Viewing frames from repository: \", repoUuid]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '10px',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => navigate('/'),\n          className: \"back-button\",\n          children: \"\\u2190 Back to Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log('🔄 Manual refresh button clicked');\n            setForceRefreshCounter(prev => prev + 1);\n            setCacheBuster(Date.now());\n            setLastUpdate(new Date());\n            loadFrames(repoUuid);\n            fetchTotalFrames(repoUuid);\n            fetchVideoInfo(repoUuid);\n          },\n          className: \"refresh-button\",\n          disabled: loading,\n          children: loading ? 'Refreshing...' : '🔄 Refresh'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 908,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            console.log('📥 Download video button clicked');\n            downloadVideo(repoUuid);\n          },\n          className: \"download-button\",\n          disabled: loading || isProcessing,\n          title: \"Download the processed video\",\n          children: \"\\uD83D\\uDCE5 Download Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 893,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading frames...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total frames: \", totalFrames]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 13\n        }, this), !isProcessing && totalFrames > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#28a745',\n            fontWeight: '500'\n          },\n          children: [\"\\u2705 Processing complete! \", totalFrames, \" frames available\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 15\n        }, this), lastUpdate && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"last-update\",\n          children: [\"Last updated: \", lastUpdate.toLocaleTimeString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 15\n        }, this), videoInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD83D\\uDCF9 Video Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 959,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-info-grid\",\n            children: [videoInfo.video && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-info-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83C\\uDFAC Video Stream\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 963,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Resolution:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 965,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: [videoInfo.video.width, \" \\xD7 \", videoInfo.video.height]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 966,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 964,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Frame Rate:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 969,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: videoInfo.video.r_frame_rate\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 970,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 968,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Codec:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 973,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: videoInfo.video.codec_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 974,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 23\n              }, this), videoInfo.video.bit_rate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Bit Rate:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 978,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: [Math.round(videoInfo.video.bit_rate / 1000), \" kbps\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 979,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 977,\n                columnNumber: 25\n              }, this), videoInfo.video.pix_fmt && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Pixel Format:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 984,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: videoInfo.video.pix_fmt\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 985,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 983,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 962,\n              columnNumber: 21\n            }, this), videoInfo.audio && videoInfo.audio.codec_name && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-info-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83C\\uDFB5 Audio Stream\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 993,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Codec:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 995,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: videoInfo.audio.codec_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 996,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 994,\n                columnNumber: 23\n              }, this), videoInfo.audio.sample_rate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Sample Rate:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1000,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: [Math.round(videoInfo.audio.sample_rate / 1000), \" kHz\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1001,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 999,\n                columnNumber: 25\n              }, this), videoInfo.audio.channels && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Channels:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1006,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: videoInfo.audio.channels\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1007,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1005,\n                columnNumber: 25\n              }, this), videoInfo.audio.bit_rate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Bit Rate:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1012,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: [Math.round(videoInfo.audio.bit_rate / 1000), \" kbps\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1013,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1011,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 992,\n              columnNumber: 21\n            }, this), videoInfo.format && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-info-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"\\uD83D\\uDCE6 Container\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1021,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Format:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1023,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: videoInfo.format.format_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1024,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1022,\n                columnNumber: 23\n              }, this), videoInfo.format.duration && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Duration:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1028,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: [Math.round(videoInfo.format.duration), \"s\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1029,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1027,\n                columnNumber: 25\n              }, this), videoInfo.format.bit_rate && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"info-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"label\",\n                  children: \"Total Bit Rate:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1034,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"value\",\n                  children: [Math.round(videoInfo.format.bit_rate / 1000), \" kbps\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1035,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1033,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1020,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 960,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 958,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 943,\n        columnNumber: 11\n      }, this), runningTasks.map((task, index) => {\n        const getTaskIcon = status => {\n          switch (status) {\n            case 'submitting':\n              return '⏳';\n            case 'running':\n            case 'processing':\n              return '🔄';\n            case 'completed':\n              return '✅';\n            case 'failed':\n              return '❌';\n            default:\n              return '🔄';\n          }\n        };\n        const getTaskMessage = status => {\n          switch (status) {\n            case 'submitting':\n              return 'Starting interpolation...';\n            case 'running':\n              return 'Processing frames...';\n            case 'processing':\n              return 'Interpolating frames...';\n            case 'completed':\n              return 'Interpolation completed!';\n            case 'failed':\n              return 'Interpolation failed!';\n            default:\n              return 'Processing...';\n          }\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `task-status-banner task-${task.status}`,\n          style: {\n            top: `${20 + index * 120}px`\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-status-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [getTaskIcon(task.status), \" \", getTaskMessage(task.status)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1075,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setRunningTasks(prev => prev.filter(t => t.id !== task.id)),\n              className: \"task-status-close\",\n              title: \"Dismiss (task continues in background)\",\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1076,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-status-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [\"Frames (\", task.frames.length, \"):\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 22\n              }, this), \" \", task.frames.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1085,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Task ID:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 22\n              }, this), \" \", task.id.substring(0, 8), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1086,\n              columnNumber: 19\n            }, this), task.progress && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Progress:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1088,\n                columnNumber: 24\n              }, this), \" \", task.progress.current || 0, \"/\", task.progress.total || 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1088,\n              columnNumber: 21\n            }, this), task.status === 'completed' && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"task-status-note\",\n              children: \"\\u2728 Auto-dismiss in 15s\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1091,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1084,\n            columnNumber: 17\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1069,\n          columnNumber: 15\n        }, this);\n      }), parentDecompositionTask && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `task-status-banner task-${parentDecompositionTask.status}`,\n        style: {\n          top: `${20 + runningTasks.length * 120}px`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-status-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [parentDecompositionTask.status === 'submitting' && '⏳', parentDecompositionTask.status === 'processing' && '🎬', parentDecompositionTask.status === 'completed' && '✅', parentDecompositionTask.status === 'failed' && '❌', ' ', parentDecompositionTask.status === 'submitting' && 'Starting decomposition...', parentDecompositionTask.status === 'processing' && 'Decomposing video...', parentDecompositionTask.status === 'completed' && 'Decomposition completed!', parentDecompositionTask.status === 'failed' && 'Decomposition failed!']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDecompositionTask(null),\n            className: \"task-status-close\",\n            title: \"Dismiss (task continues in background)\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1104,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-status-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Task ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1125,\n              columnNumber: 20\n            }, this), \" \", parentDecompositionTask.id.substring(0, 8), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1125,\n            columnNumber: 17\n          }, this), parentDecompositionTask.progress && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Progress:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1127,\n              columnNumber: 22\n            }, this), \" \", parentDecompositionTask.progress.current || 0, \"/\", parentDecompositionTask.progress.total || 100, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1127,\n            columnNumber: 19\n          }, this), parentDecompositionTask.status === 'completed' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"task-status-note\",\n            children: \"\\u2728 Auto-dismiss in 15s\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1130,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1124,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 13\n      }, this), parentRecompositionTask && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `task-status-banner task-${parentRecompositionTask.status}`,\n        style: {\n          top: `${20 + runningTasks.length * 120 + (parentDecompositionTask ? 120 : 0)}px`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-status-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [parentRecompositionTask.status === 'submitting' && '⏳', parentRecompositionTask.status === 'processing' && '🎬', parentRecompositionTask.status === 'completed' && '✅', parentRecompositionTask.status === 'failed' && '❌', ' ', parentRecompositionTask.status === 'submitting' && 'Starting video recomposition...', parentRecompositionTask.status === 'processing' && 'Recomposing video...', parentRecompositionTask.status === 'completed' && 'Video recomposition completed!', parentRecompositionTask.status === 'failed' && 'Video recomposition failed!']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setRecompositionTask(null),\n            className: \"task-status-close\",\n            title: \"Dismiss (task continues in background)\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1154,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1142,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-status-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Task ID:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1163,\n              columnNumber: 20\n            }, this), \" \", parentRecompositionTask.id.substring(0, 8), \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1163,\n            columnNumber: 17\n          }, this), parentRecompositionTask.progress && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Progress:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1165,\n              columnNumber: 22\n            }, this), \" \", parentRecompositionTask.progress.current || 0, \"/\", parentRecompositionTask.progress.total || 100, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1165,\n            columnNumber: 19\n          }, this), parentRecompositionTask.status === 'completed' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"task-status-note\",\n            children: \"\\u2728 Auto-dismiss in 15s\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1168,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1162,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 13\n      }, this), selectedFrameNumbers.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `selected-frames-banner ${bannerCollapsed ? 'collapsed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"banner-title\",\n            children: [\"Selected Frames: \", selectedFrameNumbers.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setBannerCollapsed(!bannerCollapsed),\n              className: \"banner-toggle-btn\",\n              title: bannerCollapsed ? \"Expand banner\" : \"Collapse banner\",\n              children: bannerCollapsed ? '▼' : '▲'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1180,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: event => {\n                if (selectedFrameNumbers.length > 0) {\n                  const blob = new Blob([selectedFrameNumbers.join('\\n')], {\n                    type: 'text/plain'\n                  });\n                  const url = URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `selected_frames_${repoUuid}.txt`;\n                  document.body.appendChild(a);\n                  a.click();\n                  document.body.removeChild(a);\n                  URL.revokeObjectURL(url);\n\n                  // Show brief success feedback\n                  const btn = event.target;\n                  const originalText = btn.innerHTML;\n                  btn.innerHTML = '✓';\n                  btn.style.background = 'rgba(40, 167, 69, 0.8)';\n                  setTimeout(() => {\n                    btn.innerHTML = originalText;\n                    btn.style.background = '';\n                  }, 1000);\n                }\n              },\n              className: \"banner-download-btn\",\n              title: \"Download selected frame numbers\",\n              disabled: selectedFrameNumbers.length === 0,\n              children: \"\\uD83D\\uDCE5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1187,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedFrames(new Set()),\n              className: \"banner-clear-btn\",\n              title: \"Clear all selections\",\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1179,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 15\n        }, this), !bannerCollapsed && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner-content\",\n          children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: selectedFrameNumbers.join(', '),\n            onChange: e => {\n              const input = e.target.value;\n              const numbers = input.split(',').map(s => s.trim()).filter(s => s !== '');\n              const validNumbers = numbers.map(n => {\n                const num = parseFloat(n);\n                return isNaN(num) ? null : num;\n              }).filter(n => n !== null);\n              setSelectedFrames(new Set(validNumbers));\n            },\n            className: \"banner-textarea\",\n            placeholder: \"Enter frame numbers separated by commas...\",\n            rows: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1228,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1227,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner-run-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: async () => {\n              console.log('🚀 Run button clicked with frames:', selectedFrameNumbers);\n              if (selectedFrameNumbers.length === 0) {\n                alert('Please select frames to process');\n                return;\n              }\n\n              // Allow multiple tasks to run concurrently\n\n              const taskId = `temp-${Date.now()}`;\n              try {\n                // Add task to queue with submitting status\n                setRunningTasks(prev => [...prev, {\n                  id: taskId,\n                  status: 'submitting',\n                  frames: [...selectedFrameNumbers],\n                  startTime: Date.now()\n                }]);\n\n                // Clear selections immediately\n                setSelectedFrames(new Set());\n\n                // Submit interpolation job to backend\n                const response = await fetch(`http://localhost:8500/api/interpolate/${repoUuid}`, {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    target_frames: selectedFrameNumbers\n                  })\n                });\n                if (response.ok) {\n                  const result = await response.json();\n                  console.log('✅ Interpolation job submitted:', result);\n\n                  // Update task with real ID and running status\n                  setRunningTasks(prev => prev.map(task => task.id === taskId ? {\n                    ...task,\n                    id: result.task_id,\n                    status: 'running'\n                  } : task));\n\n                  // Start polling for this specific task\n                  pollTaskStatus(result.task_id, repoUuid);\n                  console.log(`✅ Task ${result.task_id} started for ${selectedFrameNumbers.length} frames`);\n                } else {\n                  const error = await response.text();\n                  console.error('❌ Interpolation failed:', error);\n                  alert(`❌ Failed to start interpolation: ${error}`);\n\n                  // Remove failed task\n                  setRunningTasks(prev => prev.filter(task => task.id !== taskId));\n                }\n              } catch (error) {\n                console.error('❌ Network error:', error);\n                alert(`❌ Network error: ${error.message}`);\n\n                // Remove failed task\n                setRunningTasks(prev => prev.filter(task => task.id !== taskId));\n              }\n            },\n            className: \"banner-run-btn\",\n            title: \"Run interpolation on selected frames\",\n            disabled: selectedFrameNumbers.length === 0,\n            children: \"\\uD83D\\uDE80 Run Interpolation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1246,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1245,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1176,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"frames-grid\",\n        children: frames.map((framePath, index) => {\n          const frameNumber = frameNumbers[index] !== undefined ? frameNumbers[index] : (currentPage - 1) * framesPerPage + index + 1;\n          const isSelected = selectedFrames.has(frameNumber);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `frame-container ${isSelected ? 'selected' : ''}`,\n            onClick: () => toggleFrameSelection(frameNumber),\n            style: {\n              cursor: 'pointer'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:8500/${framePath}?cb=${cacheBuster}&fc=${forceRefreshCounter}`,\n              alt: `Frame ${frameNumber}`,\n              className: \"frame-image\",\n              loading: \"lazy\",\n              onError: e => {\n                console.error(`Failed to load image: ${framePath}`);\n                e.target.style.display = 'none';\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1337,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"frame-info\",\n              children: frameNumber\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1347,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1331,\n            columnNumber: 17\n          }, this);\n        })\n      }, `frames-${forceRefreshCounter}-${currentPage}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1325,\n        columnNumber: 11\n      }, this), totalFrames > framesPerPage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToPrevPage,\n          disabled: currentPage === 1,\n          className: \"page-button\",\n          children: \"\\u2190 Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1357,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-numbers\",\n          children: Array.from({\n            length: Math.ceil(totalFrames / framesPerPage)\n          }, (_, i) => i + 1).filter(page => page === 1 || page === Math.ceil(totalFrames / framesPerPage) || page >= currentPage - 2 && page <= currentPage + 2).map((page, index, array) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [index > 0 && array[index - 1] !== page - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"page-ellipsis\",\n              children: \"...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1372,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => goToPage(page),\n              className: `page-button ${currentPage === page ? 'active' : ''}`,\n              children: page\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1374,\n              columnNumber: 23\n            }, this)]\n          }, page, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1370,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1365,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToNextPage,\n          disabled: currentPage === Math.ceil(totalFrames / framesPerPage),\n          className: \"page-button\",\n          children: \"Next \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1384,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1397,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 892,\n    columnNumber: 5\n  }, this);\n}\n_s2(FrameDisplay, \"MMASlxpkNpFK4hliHDfJ98nwAhI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c2 = FrameDisplay;\nfunction App() {\n  _s3();\n  const [decompositionTask, setDecompositionTask] = useState(null);\n  const [recompositionTask, setRecompositionTask] = useState(null);\n  const [pollDecompositionStatus, setPollDecompositionStatus] = useState(null);\n  const [pollRecompositionStatus, setPollRecompositionStatus] = useState(null);\n  const handleUploadComplete = useCallback(response => {\n    // Start tracking decomposition task if backend uses Celery\n    if (response.task_id) {\n      console.log(`🎬 Decomposition task started: ${response.task_id}`);\n      setDecompositionTask({\n        id: response.task_id,\n        status: 'processing',\n        startTime: Date.now()\n      });\n      // Start polling for decomposition task status\n      if (pollDecompositionStatus) {\n        pollDecompositionStatus(response.task_id, response.uuid);\n      } else {\n        // If polling function is not available yet, store the task info for later\n        console.log(`⏳ Polling function not available yet, will start polling when FrameDisplay loads`);\n      }\n    }\n  }, [pollDecompositionStatus]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(UploadInterface, {\n        onUploadComplete: handleUploadComplete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1432,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/:repoUuid\",\n      element: /*#__PURE__*/_jsxDEV(FrameDisplay, {\n        setDecompositionTask: setDecompositionTask,\n        setPollDecompositionStatus: setPollDecompositionStatus,\n        decompositionTask: decompositionTask,\n        setRecompositionTask: setRecompositionTask,\n        setPollRecompositionStatus: setPollRecompositionStatus,\n        recompositionTask: recompositionTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1433,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1433,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1431,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"UqumGcQCepLPNBak3/0hryjGpW8=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"UploadInterface\");\n$RefreshReg$(_c2, \"FrameDisplay\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useMemo","useParams","useNavigate","Routes","Route","jsxDEV","_jsxDEV","Fragment","_Fragment","UploadInterface","onUploadComplete","_s","selectedFile","setSelectedFile","uploading","setUploading","uploadProgress","setUploadProgress","uploadStatus","setUploadStatus","uploadSpeed","setUploadSpeed","uploadStartTime","setUploadStartTime","isUploading","setIsUploading","repoUuid","setRepoUuid","isProcessing","setIsProcessing","processingStatus","setProcessingStatus","totalFrames","setTotalFrames","navigate","handleFileSelect","file","console","log","name","type","size","startsWith","handleUpload","warn","handleFileInputChange","e","target","files","toFixed","startTime","Date","now","formData","FormData","append","xhr","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentComplete","loaded","total","elapsed","speed","uploadTime","status","getAllResponseHeaders","responseText","response","JSON","parse","uuid","parseError","error","open","timeout","send","handleDrop","preventDefault","dataTransfer","handleDragOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDrop","onDragOver","accept","onChange","id","style","display","htmlFor","formatFileSize","width","_c","bytes","k","sizes","i","Math","floor","parseFloat","pow","FrameDisplay","setDecompositionTask","setPollDecompositionStatus","decompositionTask","parentDecompositionTask","setRecompositionTask","setPollRecompositionStatus","recompositionTask","parentRecompositionTask","_s2","frames","setFrames","frameNumbers","setFrameNumbers","selectedFrames","setSelectedFrames","Set","bannerCollapsed","setBannerCollapsed","loading","setLoading","setError","currentPage","setCurrentPage","lastUpdate","setLastUpdate","lastDirModTime","setLastDirModTime","lastKnownFrameCount","setLastKnownFrameCount","lastKnownFrameNames","setLastKnownFrameNames","videoInfo","setVideoInfo","runningTasks","setRunningTasks","forceRefreshCounter","setForceRefreshCounter","cacheBuster","setCacheBuster","framesPerPage","frameCache","Map","toggleFrameSelection","frameNumber","prev","newSet","has","delete","add","selectedFrameNumbers","Array","from","sort","a","b","fetchTotalFrames","fetch","ok","data","json","err","fetchVideoInfo","checkProcessingStatus","stringify","processing_complete","frame_count","has_metadata","loadFrames","start","end","Error","statusText","framePaths","filenames","filter","filename","includes","endsWith","loadTime","length","numbers","message","checkForChanges","currentResponse","window","resetBaseline","goToPage","page","goToNextPage","ceil","goToPrevPage","pollTaskStatus","taskId","pollInterval","setInterval","statusData","map","task","setTimeout","prevTasks","t","clearInterval","result","progress","pollDecompositionStatus","pollRecompositionStatus","downloadCompletedVideo","output_video_path","downloadVideo","method","headers","body","output_filename","task_id","text","alert","videoPath","retryCount","maxRetries","checkUrl","controller","AbortController","timeoutId","abort","checkResponse","signal","clearTimeout","downloadUrl","link","document","createElement","href","download","appendChild","click","removeChild","then","catch","interval","toISOString","hasChanges","gap","alignItems","onClick","disabled","title","color","fontWeight","toLocaleTimeString","video","height","r_frame_rate","codec_name","bit_rate","round","pix_fmt","audio","sample_rate","channels","format","format_name","duration","index","getTaskIcon","getTaskMessage","top","join","substring","current","blob","Blob","url","URL","createObjectURL","revokeObjectURL","btn","originalText","innerHTML","background","value","input","split","s","trim","validNumbers","n","num","isNaN","placeholder","rows","target_frames","framePath","undefined","isSelected","cursor","src","alt","onError","_","array","_c2","App","_s3","handleUploadComplete","path","element","_c3","$RefreshReg$"],"sources":["/workspace/src/App.js"],"sourcesContent":["import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport { useParams, useNavigate, Routes, Route } from 'react-router-dom';\nimport './App.css';\n\nfunction UploadInterface({ onUploadComplete }) {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadStatus, setUploadStatus] = useState('');\n  const [uploadSpeed, setUploadSpeed] = useState(0);\n  const [uploadStartTime, setUploadStartTime] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [repoUuid, setRepoUuid] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [totalFrames, setTotalFrames] = useState(0);\n  const navigate = useNavigate();\n\n  const handleFileSelect = (file) => {\n    console.log('📂 File selected:', {\n      name: file?.name,\n      type: file?.type,\n      size: file?.size\n    });\n    \n    if (file && file.type.startsWith('video/')) {\n      console.log('✅ Valid video file selected');\n      setSelectedFile(file);\n      setUploadStatus('');\n      // Automatically start upload when file is selected\n      handleUpload(file);\n    } else {\n      console.warn('❌ Invalid file type selected:', file?.type);\n      setUploadStatus('Please select a valid video file.');\n      setSelectedFile(null);\n    }\n  };\n\n  const handleFileInputChange = (e) => {\n    console.log('🖱️ File input change event');\n    const file = e.target.files[0];\n    handleFileSelect(file);\n  };\n\n  const handleUpload = useCallback(async (file) => {\n    if (!file) return;\n\n    console.log(`🚀 Starting upload for file: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);\n    const startTime = Date.now();\n\n    setUploadStatus('Uploading...');\n    setUploadProgress(0);\n    setUploadSpeed('');\n    setIsUploading(true);\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const xhr = new XMLHttpRequest();\n    \n    xhr.upload.addEventListener('progress', (event) => {\n      if (event.lengthComputable) {\n        const percentComplete = (event.loaded / event.total) * 100;\n        const elapsed = (Date.now() - startTime) / 1000;\n        const speed = (event.loaded / 1024 / 1024 / elapsed).toFixed(2);\n        \n        console.log(`📤 Upload progress: ${percentComplete.toFixed(1)}% (${speed} MB/s)`);\n        setUploadProgress(percentComplete);\n        setUploadSpeed(`${speed} MB/s`);\n        \n        // Just log progress, don't navigate yet - wait for server response\n        if (percentComplete >= 100) {\n          console.log(`🚀 Upload reached 100% - waiting for server response...`);\n          setUploadStatus('Upload complete! Processing...');\n        }\n      }\n    });\n\n    xhr.addEventListener('load', () => {\n      const uploadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.log(`✅ Upload completed in ${uploadTime}s`);\n      console.log(`📡 Response status: ${xhr.status}`);\n      console.log(`📡 Response headers:`, xhr.getAllResponseHeaders());\n      \n      if (xhr.status === 200) {\n        console.log(`📄 Raw response text:`, xhr.responseText);\n        \n        try {\n          const response = JSON.parse(xhr.responseText);\n          console.log(`🎯 Parsed response:`, response);\n          console.log(`🎯 Backend assigned UUID: ${response.uuid}`);\n          \n          // Navigate directly to frames view with the UUID from server\n          console.log(`🔄 Navigating to frames view: /${response.uuid}`);\n          setRepoUuid(response.uuid);\n          navigate(`/${response.uuid}`);\n          \n          // Call the upload complete callback with response data\n          if (onUploadComplete) {\n            onUploadComplete(response);\n          }\n          \n          setUploadStatus('Upload successful! Navigating to frames page...');\n          setIsUploading(false);\n          setUploadProgress(100);\n          setUploadSpeed('');\n          \n        } catch (parseError) {\n          console.error(`❌ Failed to parse response JSON:`, parseError);\n          console.error(`❌ Raw response was:`, xhr.responseText);\n          setUploadStatus('Upload failed! Invalid server response');\n          setIsUploading(false);\n        }\n      } else {\n        console.error(`❌ Upload failed with status ${xhr.status}: ${xhr.responseText}`);\n        console.error(`❌ Response headers:`, xhr.getAllResponseHeaders());\n        setUploadStatus('Upload failed!');\n        setIsUploading(false);\n      }\n    });\n\n    xhr.addEventListener('error', () => {\n      const uploadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.error(`💥 Upload error after ${uploadTime}s: Network error`);\n      setUploadStatus('Upload failed! Network error');\n      setIsUploading(false);\n    });\n\n    xhr.addEventListener('timeout', () => {\n      const uploadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.error(`⏰ Upload timeout after ${uploadTime}s`);\n      setUploadStatus('Upload failed! Timeout');\n      setIsUploading(false);\n    });\n\n            xhr.open('POST', 'http://localhost:8500/video_upload');\n    xhr.timeout = 600000; // 10 minutes\n    console.log(`🌐 Sending request to backend...`);\n    xhr.send(formData);\n  }, []);\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    console.log('📥 File dropped');\n    const file = e.dataTransfer.files[0];\n    handleFileSelect(file);\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    console.log('📤 File drag over');\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1>Remove this Flash ⚡🎥</h1>\n        <p className=\"description\">\n          Upload a video to remove flash and replace individual frames using AI.\n        </p>\n      </header>\n      \n      <div className=\"upload-container\">\n        <div \n          className={`upload-area ${selectedFile ? 'has-file' : ''} ${isUploading ? 'uploading' : ''}`}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n        >\n          <input\n            type=\"file\"\n            accept=\"video/*\"\n            onChange={handleFileInputChange}\n            id=\"file-input\"\n            style={{ display: 'none' }}\n          />\n          <label htmlFor=\"file-input\" className=\"upload-label\">\n            {selectedFile ? (\n              <div>\n                <p>Selected: {selectedFile.name}</p>\n                <p className=\"file-info\">\n                  Size: {formatFileSize(selectedFile.size)}\n                </p>\n                {isUploading && <p className=\"upload-status\">Uploading automatically...</p>}\n                {isProcessing && <p className=\"processing-status\">Processing video...</p>}\n              </div>\n            ) : (\n              <div>\n                <p>📁 Drop video file here or click to select</p>\n                <p className=\"upload-hint\">Upload starts automatically when video is selected</p>\n              </div>\n            )}\n          </label>\n        </div>\n\n        {isUploading && (\n          <div className=\"upload-progress\">\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress-fill\" \n                style={{ width: `${uploadProgress}%` }}\n              ></div>\n            </div>\n            <p>{uploadStatus}</p>\n            {uploadSpeed && (\n              <p className=\"upload-speed\">Speed: {uploadSpeed}</p>\n            )}\n          </div>\n        )}\n\n        {isProcessing && (\n          <div className=\"processing-status\">\n            <div className=\"processing-spinner\"></div>\n            <p>{processingStatus}</p>\n            <p className=\"processing-hint\">This may take several minutes for large videos</p>\n          </div>\n        )}\n\n        {uploadStatus && !isUploading && !isProcessing && (\n          <p className=\"upload-status\">{uploadStatus}</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction formatFileSize(bytes) {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nfunction FrameDisplay({ setDecompositionTask, setPollDecompositionStatus, decompositionTask: parentDecompositionTask, setRecompositionTask, setPollRecompositionStatus, recompositionTask: parentRecompositionTask }) {\n  const { repoUuid } = useParams();\n  const navigate = useNavigate();\n  \n  console.log(`🎬 FrameDisplay component initialized`);\n  console.log(`🎬 repoUuid from params:`, repoUuid);\n  \n  const [frames, setFrames] = useState([]);\n  const [frameNumbers, setFrameNumbers] = useState([]);\n  const [selectedFrames, setSelectedFrames] = useState(new Set());\n  const [bannerCollapsed, setBannerCollapsed] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalFrames, setTotalFrames] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [processingStatus, setProcessingStatus] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(true);\n  const [lastDirModTime, setLastDirModTime] = useState(null);\n  const [lastKnownFrameCount, setLastKnownFrameCount] = useState(0);\n  const [lastKnownFrameNames, setLastKnownFrameNames] = useState('');\n  const [videoInfo, setVideoInfo] = useState(null);\n  const [runningTasks, setRunningTasks] = useState([]); // Changed to array for multiple tasks\n  const [forceRefreshCounter, setForceRefreshCounter] = useState(0); // Force refresh trigger\n  const [cacheBuster, setCacheBuster] = useState(Date.now()); // Cache buster for images\n  \n  const framesPerPage = 20;\n\n  // Memoize the frame cache to avoid unnecessary re-renders\n  const frameCache = useMemo(() => new Map(), []);\n\n  // Handle frame selection\n  const toggleFrameSelection = useCallback((frameNumber) => {\n    setSelectedFrames(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(frameNumber)) {\n        newSet.delete(frameNumber);\n      } else {\n        newSet.add(frameNumber);\n      }\n      return newSet;\n    });\n  }, []);\n\n  // Get selected frame numbers as sorted array\n  const selectedFrameNumbers = useMemo(() => {\n    return Array.from(selectedFrames).sort((a, b) => a - b);\n  }, [selectedFrames]);\n\n\n\n  // Handle 'pending' case - wait for actual UUID\n  useEffect(() => {\n    if (repoUuid === 'pending') {\n      console.log(`⏳ Waiting for actual UUID to be assigned...`);\n      setLoading(true);\n    }\n  }, [repoUuid]);\n\n  const fetchTotalFrames = useCallback(async (uuid) => {\n    try {\n      const response = await fetch(`http://localhost:8500/ls/${uuid}/?start=0&end=0`);\n      if (response.ok) {\n        const data = await response.json();\n        setTotalFrames(data.frames.total);\n      }\n    } catch (err) {\n      console.error('Failed to get total frames count:', err);\n    }\n  }, []);\n\n  const fetchVideoInfo = useCallback(async (uuid) => {\n    try {\n              const response = await fetch(`http://localhost:8500/static/${uuid}/video_info.json`);\n      if (response.ok) {\n        const data = await response.json();\n        setVideoInfo(data);\n      }\n    } catch (err) {\n      console.error('Failed to get video info:', err);\n    }\n  }, []);\n\n\n\n  const checkProcessingStatus = useCallback(async (uuid) => {\n    if (!uuid) return;\n    \n    try {\n      console.log(`🔍 Checking processing status for ${uuid}...`);\n      const response = await fetch(`http://localhost:8500/${uuid}/status`);\n      const data = await response.json();\n      \n      console.log(`📊 Processing status: ${JSON.stringify(data)}`);\n      \n      if (data.processing_complete) {\n        console.log(`🎉 Video processing completed! Found ${data.frame_count} frames`);\n        setIsProcessing(false);\n        setProcessingStatus('Processing complete!');\n      } else {\n        // Check if we have a decomposition task running\n        if (parentDecompositionTask && parentDecompositionTask.status === 'processing') {\n          console.log(`⏳ Decomposition in progress... (${data.frame_count} frames, metadata: ${data.has_metadata})`);\n          setProcessingStatus(`Decomposing video... (${data.frame_count} frames available)`);\n          setIsProcessing(true);\n        } else {\n          console.log(`⏳ Still processing... (${data.frame_count} frames, metadata: ${data.has_metadata})`);\n          setProcessingStatus(`Processing video... (${data.frame_count} frames available)`);\n          setIsProcessing(true);\n        }\n      }\n    } catch (error) {\n      console.error(`❌ Error checking processing status: ${error}`);\n      setProcessingStatus('Error checking status');\n    }\n  }, [parentDecompositionTask]);\n\n  const loadFrames = useCallback(async (uuid) => {\n    if (!uuid) {\n      console.log(`❌ loadFrames called with no UUID`);\n      return;\n    }\n    \n    try {\n      console.log(`🖼️ Loading frames for ${uuid}, page ${currentPage}...`);\n      setLoading(true);\n      const startTime = Date.now();\n      \n      // Calculate pagination\n      const start = (currentPage - 1) * framesPerPage;\n      const end = start + framesPerPage - 1;\n      \n      console.log(`📄 Fetching frames from ${start} to ${end}...`);\n      const response = await fetch(`http://localhost:8500/ls/${uuid}/?start=${start}&end=${end}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log(`📊 Response data:`, data);\n      \n      // Use the raw frame paths directly (skip video_info.json and audio.wav)\n      const framePaths = data.filenames\n        .filter(filename => filename.includes('frame_') && filename.endsWith('.jpg'));\n      \n      const loadTime = ((Date.now() - startTime) / 1000).toFixed(2);\n      console.log(`✅ Loaded ${framePaths.length} frames in ${loadTime}s`);\n      \n      console.log(`📊 Setting frames state: ${framePaths.length} frames`);\n      setFrames(framePaths);\n      setFrameNumbers(data.frames.numbers);\n      setLoading(false);\n      setLastUpdate(new Date());\n      console.log(`✅ Frame state updated successfully`);\n      \n      // Set baseline frame count and names  \n      setLastKnownFrameCount(data.frames.total);\n      setLastKnownFrameNames(JSON.stringify(data));\n      \n      // Update total frame count from the response\n      console.log(`📊 Total frames from backend: ${data.frames.total}`);\n      setTotalFrames(data.frames.total);\n    } catch (error) {\n      console.error(`❌ Error loading frames: ${error}`);\n      setError('Failed to load frames: ' + error.message);\n      setLoading(false);\n    }\n  }, [currentPage, framesPerPage]);\n\n  const checkForChanges = useCallback(async (uuid) => {\n    if (!uuid) return false;\n    \n    try {\n      console.log(`🔍 Checking for changes by comparing API response...`);\n      \n      // Calculate current page frame range\n      const start = (currentPage - 1) * framesPerPage;\n      const end = start + framesPerPage - 1;\n      \n      const response = await fetch(`http://localhost:8500/ls/${uuid}/?start=${start}&end=${end}`);\n      if (response.ok) {\n        const data = await response.json();\n        \n        // Simple comparison: stringify the entire response\n        const currentResponse = JSON.stringify(data);\n        \n        console.log(`📊 Response size: ${currentResponse.length} chars`);\n        \n        if (lastKnownFrameNames && lastKnownFrameNames !== currentResponse) {\n          console.log(`🔄 API response changed!`);\n          setLastKnownFrameNames(currentResponse);\n          return true;\n        } else if (!lastKnownFrameNames) {\n          console.log(`📅 First load - setting baseline response`);\n          setLastKnownFrameNames(currentResponse);\n        } else {\n          console.log(`✅ No changes detected - response identical`);\n        }\n      }\n\n    } catch (error) {\n      console.error(`❌ Error checking for changes: ${error}`);\n    }\n    return false;\n  }, [lastKnownFrameNames, currentPage, framesPerPage]);\n\n  // Add a global function to reset baseline (for debugging)\n  useEffect(() => {\n    window.resetBaseline = () => {\n      setLastKnownFrameNames(null);\n      console.log('🔄 Baseline reset - next check will set new baseline');\n    };\n  }, []);\n\n  // Pagination functions\n  const goToPage = useCallback((page) => {\n    setCurrentPage(page);\n  }, []);\n\n  const goToNextPage = useCallback(() => {\n    if (currentPage < Math.ceil(totalFrames / framesPerPage)) {\n      goToPage(currentPage + 1);\n    }\n  }, [currentPage, totalFrames, framesPerPage, goToPage]);\n\n  const goToPrevPage = useCallback(() => {\n    if (currentPage > 1) {\n      goToPage(currentPage - 1);\n    }\n  }, [currentPage, goToPage]);\n\n  // Function to poll individual task status\n  const pollTaskStatus = useCallback(async (taskId, repoUuid) => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await fetch(`http://localhost:8500/api/tasks/${taskId}/status`);\n        if (response.ok) {\n          const statusData = await response.json();\n          \n          setRunningTasks(prev => prev.map(task => {\n            if (task.id === taskId) {\n              if (statusData.status === 'completed') {\n                console.log(`✅ Task ${taskId} completed successfully!`);\n                \n                // Trigger page refresh since new frames were created\n                console.log('🔄 Triggering page refresh due to completed interpolation');\n                setForceRefreshCounter(prev => prev + 1);\n                setCacheBuster(Date.now());\n                loadFrames(repoUuid);\n                fetchTotalFrames(repoUuid);\n                \n                // Mark as completed and schedule removal\n                setTimeout(() => {\n                  setRunningTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\n                }, 15000); // Remove after 15 seconds\n                \n                clearInterval(pollInterval);\n                return { ...task, status: 'completed', result: statusData.result };\n                \n              } else if (statusData.status === 'failed') {\n                console.error(`❌ Task ${taskId} failed:`, statusData.error);\n                clearInterval(pollInterval);\n                \n                // Remove failed task after 5 seconds\n                setTimeout(() => {\n                  setRunningTasks(prevTasks => prevTasks.filter(t => t.id !== taskId));\n                }, 5000);\n                \n                return { ...task, status: 'failed', error: statusData.error };\n              } else if (statusData.status === 'processing') {\n                return { ...task, status: 'processing', progress: statusData.progress };\n              }\n            }\n            return task;\n          }));\n        }\n      } catch (error) {\n        console.error(`Error polling task ${taskId}:`, error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup after 5 minutes\n    setTimeout(() => clearInterval(pollInterval), 300000);\n  }, [loadFrames, fetchTotalFrames]);\n\n  // Function to poll decomposition task status\n  const pollDecompositionStatus = useCallback(async (taskId, repoUuid) => {\n    console.log(`🔍 Starting to poll decomposition task: ${taskId}`);\n    const pollInterval = setInterval(async () => {\n      try {\n        console.log(`🔍 Polling decomposition task: ${taskId}`);\n        const response = await fetch(`http://localhost:8500/api/tasks/${taskId}/status`);\n        if (response.ok) {\n          const statusData = await response.json();\n          console.log(`🔍 Decomposition task status: ${JSON.stringify(statusData)}`);\n          \n          setDecompositionTask(prev => {\n            console.log(`🔍 Updating decomposition task state. Current: ${JSON.stringify(prev)}, New status: ${statusData.status}`);\n            if (prev && prev.id === taskId) {\n              if (statusData.status === 'completed') {\n                console.log(`✅ Decomposition task ${taskId} completed successfully!`);\n                \n                // Trigger page refresh since frames were extracted\n                console.log('🔄 Triggering page refresh due to completed decomposition');\n                setForceRefreshCounter(prev => prev + 1);\n                setCacheBuster(Date.now());\n                loadFrames(repoUuid);\n                fetchTotalFrames(repoUuid);\n                checkProcessingStatus(repoUuid);\n                \n                // Mark as completed and schedule removal\n                setTimeout(() => {\n                  setDecompositionTask(null);\n                }, 15000); // Remove after 15 seconds\n                \n                clearInterval(pollInterval);\n                return { ...prev, status: 'completed', result: statusData.result };\n                \n              } else if (statusData.status === 'failed') {\n                console.error(`❌ Decomposition task ${taskId} failed:`, statusData.error);\n                clearInterval(pollInterval);\n                \n                // Remove failed task after 5 seconds\n                setTimeout(() => {\n                  setDecompositionTask(null);\n                }, 5000);\n                \n                return { ...prev, status: 'failed', error: statusData.error };\n              } else if (statusData.status === 'processing') {\n                return { ...prev, status: 'processing', progress: statusData.progress };\n              }\n            }\n            return prev;\n          });\n        }\n      } catch (error) {\n        console.error(`Error polling decomposition task ${taskId}:`, error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup after 5 minutes\n    setTimeout(() => clearInterval(pollInterval), 300000);\n  }, [loadFrames, fetchTotalFrames, checkProcessingStatus, setDecompositionTask]);\n\n  // Function to poll recomposition task status\n  const pollRecompositionStatus = useCallback(async (taskId, repoUuid) => {\n    console.log(`🔍 Starting to poll recomposition task: ${taskId}`);\n    const pollInterval = setInterval(async () => {\n      try {\n        console.log(`🔍 Polling recomposition task: ${taskId}`);\n        const response = await fetch(`http://localhost:8500/api/tasks/${taskId}/status`);\n        if (response.ok) {\n          const statusData = await response.json();\n          console.log(`🔍 Recomposition task status: ${JSON.stringify(statusData)}`);\n          \n          setRecompositionTask(prev => {\n            console.log(`🔍 Updating recomposition task state. Current: ${JSON.stringify(prev)}, New status: ${statusData.status}`);\n            if (prev && prev.id === taskId) {\n              if (statusData.status === 'completed') {\n                console.log(`✅ Recomposition task ${taskId} completed successfully!`);\n                \n                // Trigger download of the completed video\n                console.log('📥 Triggering video download...');\n                downloadCompletedVideo(repoUuid, statusData.result.output_video_path);\n                \n                // Mark as completed and schedule removal\n                setTimeout(() => {\n                  setRecompositionTask(null);\n                }, 15000); // Remove after 15 seconds\n                \n                clearInterval(pollInterval);\n                return { ...prev, status: 'completed', result: statusData.result };\n                \n              } else if (statusData.status === 'failed') {\n                console.error(`❌ Recomposition task ${taskId} failed:`, statusData.error);\n                clearInterval(pollInterval);\n                \n                // Remove failed task after 5 seconds\n                setTimeout(() => {\n                  setRecompositionTask(null);\n                }, 5000);\n                \n                return { ...prev, status: 'failed', error: statusData.error };\n              } else if (statusData.status === 'processing') {\n                return { ...prev, status: 'processing', progress: statusData.progress };\n              }\n            }\n            return prev;\n          });\n        }\n      } catch (error) {\n        console.error(`Error polling recomposition task ${taskId}:`, error);\n      }\n    }, 2000); // Poll every 2 seconds\n\n    // Cleanup after 5 minutes\n    setTimeout(() => clearInterval(pollInterval), 300000);\n  }, [setRecompositionTask]);\n\n  // Pass the polling function back to parent\n  useEffect(() => {\n    if (setPollDecompositionStatus) {\n      setPollDecompositionStatus(() => pollDecompositionStatus);\n    }\n  }, [pollDecompositionStatus, setPollDecompositionStatus]);\n\n  // Pass the recomposition polling function back to parent\n  useEffect(() => {\n    if (setPollRecompositionStatus) {\n      setPollRecompositionStatus(() => pollRecompositionStatus);\n    }\n  }, [pollRecompositionStatus, setPollRecompositionStatus]);\n\n  const downloadVideo = useCallback(async (uuid) => {\n    try {\n      console.log(`📥 Starting video download for ${uuid}`);\n      \n      // Set recomposition task state\n      setRecompositionTask({\n        id: `temp-${Date.now()}`,\n        status: 'submitting',\n        startTime: Date.now()\n      });\n      \n      // Start video recomposition\n      const response = await fetch(`http://localhost:8500/api/recompose/${uuid}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          output_filename: `processed_video_${uuid}.mp4`\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('✅ Video recomposition started:', result);\n        \n        // Update task with real ID and start polling\n        setRecompositionTask(prev => ({\n          ...prev,\n          id: result.task_id,\n          status: 'processing'\n        }));\n        \n        // Start polling for recomposition completion\n        if (pollRecompositionStatus) {\n          pollRecompositionStatus(result.task_id, uuid);\n        }\n        \n      } else {\n        const error = await response.text();\n        console.error('❌ Failed to start video recomposition:', error);\n        alert(`Failed to start video download: ${error}`);\n        setRecompositionTask(null);\n      }\n    } catch (error) {\n      console.error('❌ Error downloading video:', error);\n      alert(`Error downloading video: ${error.message}`);\n      setRecompositionTask(null);\n    }\n  }, [pollRecompositionStatus]);\n\n  const downloadCompletedVideo = useCallback(async (uuid, videoPath, retryCount = 0) => {\n    const maxRetries = 30; // Maximum 60 seconds of retrying (30 * 2 seconds)\n    \n    try {\n      console.log(`📥 Checking if video file is available: ${videoPath} (attempt ${retryCount + 1}/${maxRetries + 1})`);\n      \n      // First check if the file exists using a GET request but abort immediately\n      const checkUrl = `http://localhost:8500/${videoPath}`;\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 1000); // Abort after 1 second\n      \n      try {\n        const checkResponse = await fetch(checkUrl, { \n          method: 'GET',\n          signal: controller.signal\n        });\n        clearTimeout(timeoutId);\n        \n        if (!checkResponse.ok) {\n          if (retryCount >= maxRetries) {\n            console.error(`❌ Video file not available after ${maxRetries} attempts, giving up`);\n            alert(`Video download failed: File not available after 60 seconds. Please try again.`);\n            return;\n          }\n          console.log(`⏳ Video file not yet available (${checkResponse.status}), retrying in 2 seconds...`);\n          // Retry after 2 seconds\n          setTimeout(() => downloadCompletedVideo(uuid, videoPath, retryCount + 1), 2000);\n          return;\n        }\n      } catch (error) {\n        clearTimeout(timeoutId);\n        if (error.name === 'AbortError') {\n          // Request was aborted, assume file doesn't exist yet\n          if (retryCount >= maxRetries) {\n            console.error(`❌ Video file not available after ${maxRetries} attempts, giving up`);\n            alert(`Video download failed: File not available after 60 seconds. Please try again.`);\n            return;\n          }\n          console.log(`⏳ Video file not yet available (request timeout), retrying in 2 seconds...`);\n          setTimeout(() => downloadCompletedVideo(uuid, videoPath, retryCount + 1), 2000);\n          return;\n        }\n        throw error; // Re-throw other errors\n      }\n      \n      console.log(`✅ Video file is available, starting download...`);\n      \n      // Create a download link\n      const downloadUrl = `http://localhost:8500/${videoPath}`;\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = `processed_video_${uuid}.mp4`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      console.log('✅ Video download initiated');\n    } catch (error) {\n      console.error('❌ Error downloading completed video:', error);\n      if (retryCount >= maxRetries) {\n        console.error(`❌ Download failed after ${maxRetries} attempts, giving up`);\n        alert(`Video download failed after multiple attempts. Please try again.`);\n        return;\n      }\n      // Retry after 2 seconds on any error\n      setTimeout(() => downloadCompletedVideo(uuid, videoPath, retryCount + 1), 2000);\n    }\n  }, []);\n\n  // Start polling for decomposition task if it exists and polling function is available\n  useEffect(() => {\n    if (parentDecompositionTask && parentDecompositionTask.status === 'processing' && pollDecompositionStatus) {\n      console.log(`🔄 Starting polling for existing decomposition task: ${parentDecompositionTask.id}`);\n      pollDecompositionStatus(parentDecompositionTask.id, repoUuid);\n    }\n  }, [parentDecompositionTask, pollDecompositionStatus, repoUuid]);\n\n  // Check if decomposition task is already completed when component loads\n  useEffect(() => {\n    if (parentDecompositionTask && parentDecompositionTask.status === 'processing' && repoUuid) {\n      console.log(`🔍 Checking if decomposition task is already completed: ${parentDecompositionTask.id}`);\n      fetch(`http://localhost:8500/api/tasks/${parentDecompositionTask.id}/status`)\n        .then(response => response.json())\n        .then(statusData => {\n          console.log(`🔍 Initial task status check: ${JSON.stringify(statusData)}`);\n          if (statusData.status === 'completed') {\n            console.log(`✅ Decomposition task was already completed!`);\n            setDecompositionTask(prev => ({\n              ...prev,\n              status: 'completed',\n              result: statusData.result\n            }));\n            // Auto-dismiss after 15 seconds\n            setTimeout(() => {\n              setDecompositionTask(null);\n            }, 15000);\n          }\n        })\n        .catch(error => {\n          console.error(`❌ Error checking initial task status: ${error}`);\n        });\n    }\n  }, [parentDecompositionTask, repoUuid]);\n\n  // Load video info immediately when component mounts\n  useEffect(() => {\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`📹 Loading video info for repo: ${repoUuid}`);\n      fetchVideoInfo(repoUuid);\n    }\n  }, [repoUuid, fetchVideoInfo]);\n\n  // Load frames when page changes or force refresh triggered\n  useEffect(() => {\n    console.log(`🎬 useEffect triggered with repoUuid: ${repoUuid}`);\n    console.log(`🎬 Current page: ${currentPage}`);\n    console.log(`🎬 Force refresh counter: ${forceRefreshCounter}`);\n    console.log(`🎬 Is processing: ${isProcessing}`);\n    \n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`🎬 Loading frames for repo: ${repoUuid}`);\n      loadFrames(repoUuid);\n    } else if (repoUuid === 'pending') {\n      console.log(`⏳ Skipping frame load - waiting for actual UUID`);\n    } else {\n      console.log(`❌ No repoUuid available for frame loading`);\n    }\n  }, [repoUuid, currentPage, forceRefreshCounter, loadFrames]);\n\n  // Check processing status periodically\n  useEffect(() => {\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`🔍 useEffect triggered - checking processing status for repo: ${repoUuid}`);\n      console.log(`🔍 Is processing: ${isProcessing}`);\n      \n      // Check processing status once when component loads\n      checkProcessingStatus(repoUuid);\n    } else if (repoUuid === 'pending') {\n      console.log(`⏳ Skipping processing status check - waiting for actual UUID`);\n    } else {\n      console.log(`❌ No repoUuid available for processing status check`);\n    }\n  }, [repoUuid, checkProcessingStatus]);\n\n  // Auto-refresh functionality\n  useEffect(() => {\n    if (repoUuid && repoUuid !== 'pending') {\n      console.log(`🔄 Auto-refresh useEffect triggered`);\n      console.log(`🔄 repoUuid: ${repoUuid}`);\n      console.log(`🔄 isProcessing: ${isProcessing}`);\n      console.log(`🔄 Setting up auto-refresh interval (5 seconds)`);\n      \n      const interval = setInterval(async () => {\n        console.log(`🔄 Auto-refresh: checking for changes...`);\n        console.log(`🔄 Current time: ${new Date().toISOString()}`);\n        console.log(`🔄 repoUuid: ${repoUuid}`);\n        console.log(`🔄 lastDirModTime: ${lastDirModTime ? new Date(lastDirModTime).toISOString() : 'None'}`);\n        \n        // Check for changes using modification times\n        const hasChanges = await checkForChanges(repoUuid);\n        \n        if (hasChanges) {\n          console.log(`🔄 Changes detected! Triggering refresh...`);\n          console.log(`🔄 Updating lastUpdate timestamp...`);\n          setForceRefreshCounter(prev => prev + 1);\n          setCacheBuster(Date.now());\n          setLastUpdate(new Date());\n          // Check processing status and total frame count\n          checkProcessingStatus(repoUuid);\n          fetchTotalFrames(repoUuid);\n          fetchVideoInfo(repoUuid);\n          // Reload frames for current page\n          loadFrames(repoUuid);\n        } else {\n          console.log(`✅ No changes detected, skipping refresh`);\n        }\n      }, 2500); // Check every 2.5 seconds\n      \n      console.log(`🔄 Auto-refresh interval set up successfully`);\n      \n      return () => {\n        console.log(`🔄 Cleaning up auto-refresh interval`);\n        clearInterval(interval);\n      };\n    } else if (repoUuid === 'pending') {\n      console.log(`⏳ Auto-refresh not started - waiting for actual UUID`);\n    } else {\n      console.log(`⏸️ Auto-refresh not enabled - no repoUuid`);\n      console.log(`⏸️ repoUuid: ${repoUuid}`);\n    }\n  }, [repoUuid, checkProcessingStatus, loadFrames, fetchTotalFrames, fetchVideoInfo, checkForChanges]);\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1>Remove this Flash ⚡🎥</h1>\n        <p className=\"description\">\n          The AI solution to remove flash from videos and replace individual frames in videos.\n        </p>\n        <p className=\"repo-info\">\n          Viewing frames from repository: {repoUuid}\n        </p>\n        <div style={{ display: 'flex', gap: '10px', alignItems: 'center' }}>\n          <button \n            onClick={() => navigate('/')} \n            className=\"back-button\"\n          >\n            ← Back to Upload\n          </button>\n          <button \n            onClick={() => {\n              console.log('🔄 Manual refresh button clicked');\n              setForceRefreshCounter(prev => prev + 1);\n              setCacheBuster(Date.now());\n              setLastUpdate(new Date());\n              loadFrames(repoUuid);\n              fetchTotalFrames(repoUuid);\n              fetchVideoInfo(repoUuid);\n            }} \n            className=\"refresh-button\"\n            disabled={loading}\n          >\n            {loading ? 'Refreshing...' : '🔄 Refresh'}\n          </button>\n          <button \n            onClick={() => {\n              console.log('📥 Download video button clicked');\n              downloadVideo(repoUuid);\n            }} \n            className=\"download-button\"\n            disabled={loading || isProcessing}\n            title=\"Download the processed video\"\n          >\n            📥 Download Video\n          </button>\n        </div>\n      </header>\n\n      {loading ? (\n        <div className=\"loading\">\n          <div>Loading frames...</div>\n        </div>\n      ) : (\n        <>\n          <div className=\"info\">\n            <p>Total frames: {totalFrames}</p>\n            {!isProcessing && totalFrames > 0 && (\n              <p style={{ color: '#28a745', fontWeight: '500' }}>\n                ✅ Processing complete! {totalFrames} frames available\n              </p>\n            )}\n            {lastUpdate && (\n              <p className=\"last-update\">\n                Last updated: {lastUpdate.toLocaleTimeString()}\n              </p>\n            )}\n            \n            {/* Video Information Display */}\n            {videoInfo && (\n              <div className=\"video-info\">\n                <h3>📹 Video Information</h3>\n                <div className=\"video-info-grid\">\n                  {videoInfo.video && (\n                    <div className=\"video-info-section\">\n                      <h4>🎬 Video Stream</h4>\n                      <div className=\"info-item\">\n                        <span className=\"label\">Resolution:</span>\n                        <span className=\"value\">{videoInfo.video.width} × {videoInfo.video.height}</span>\n                      </div>\n                      <div className=\"info-item\">\n                        <span className=\"label\">Frame Rate:</span>\n                        <span className=\"value\">{videoInfo.video.r_frame_rate}</span>\n                      </div>\n                      <div className=\"info-item\">\n                        <span className=\"label\">Codec:</span>\n                        <span className=\"value\">{videoInfo.video.codec_name}</span>\n                      </div>\n                      {videoInfo.video.bit_rate && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Bit Rate:</span>\n                          <span className=\"value\">{Math.round(videoInfo.video.bit_rate / 1000)} kbps</span>\n                        </div>\n                      )}\n                      {videoInfo.video.pix_fmt && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Pixel Format:</span>\n                          <span className=\"value\">{videoInfo.video.pix_fmt}</span>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {videoInfo.audio && videoInfo.audio.codec_name && (\n                    <div className=\"video-info-section\">\n                      <h4>🎵 Audio Stream</h4>\n                      <div className=\"info-item\">\n                        <span className=\"label\">Codec:</span>\n                        <span className=\"value\">{videoInfo.audio.codec_name}</span>\n                      </div>\n                      {videoInfo.audio.sample_rate && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Sample Rate:</span>\n                          <span className=\"value\">{Math.round(videoInfo.audio.sample_rate / 1000)} kHz</span>\n                        </div>\n                      )}\n                      {videoInfo.audio.channels && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Channels:</span>\n                          <span className=\"value\">{videoInfo.audio.channels}</span>\n                        </div>\n                      )}\n                      {videoInfo.audio.bit_rate && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Bit Rate:</span>\n                          <span className=\"value\">{Math.round(videoInfo.audio.bit_rate / 1000)} kbps</span>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  \n                  {videoInfo.format && (\n                    <div className=\"video-info-section\">\n                      <h4>📦 Container</h4>\n                      <div className=\"info-item\">\n                        <span className=\"label\">Format:</span>\n                        <span className=\"value\">{videoInfo.format.format_name}</span>\n                      </div>\n                      {videoInfo.format.duration && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Duration:</span>\n                          <span className=\"value\">{Math.round(videoInfo.format.duration)}s</span>\n                        </div>\n                      )}\n                      {videoInfo.format.bit_rate && (\n                        <div className=\"info-item\">\n                          <span className=\"label\">Total Bit Rate:</span>\n                          <span className=\"value\">{Math.round(videoInfo.format.bit_rate / 1000)} kbps</span>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Running Tasks Status - Stack multiple tasks */}\n          {runningTasks.map((task, index) => {\n            const getTaskIcon = (status) => {\n              switch(status) {\n                case 'submitting': return '⏳';\n                case 'running': case 'processing': return '🔄';\n                case 'completed': return '✅';\n                case 'failed': return '❌';\n                default: return '🔄';\n              }\n            };\n            \n            const getTaskMessage = (status) => {\n              switch(status) {\n                case 'submitting': return 'Starting interpolation...';\n                case 'running': return 'Processing frames...';\n                case 'processing': return 'Interpolating frames...';\n                case 'completed': return 'Interpolation completed!';\n                case 'failed': return 'Interpolation failed!';\n                default: return 'Processing...';\n              }\n            };\n            \n            return (\n              <div \n                key={task.id} \n                className={`task-status-banner task-${task.status}`}\n                style={{ top: `${20 + index * 120}px` }}\n              >\n                <div className=\"task-status-header\">\n                  <span>{getTaskIcon(task.status)} {getTaskMessage(task.status)}</span>\n                  <button \n                    onClick={() => setRunningTasks(prev => prev.filter(t => t.id !== task.id))}\n                    className=\"task-status-close\"\n                    title=\"Dismiss (task continues in background)\"\n                  >\n                    ✕\n                  </button>\n                </div>\n                <div className=\"task-status-content\">\n                  <p><strong>Frames ({task.frames.length}):</strong> {task.frames.join(', ')}</p>\n                  <p><strong>Task ID:</strong> {task.id.substring(0, 8)}...</p>\n                  {task.progress && (\n                    <p><strong>Progress:</strong> {task.progress.current || 0}/{task.progress.total || 1}</p>\n                  )}\n                  {task.status === 'completed' && (\n                    <p className=\"task-status-note\">✨ Auto-dismiss in 15s</p>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n\n                    {/* Decomposition Task Status */}\n          {parentDecompositionTask && (\n            <div \n              className={`task-status-banner task-${parentDecompositionTask.status}`}\n              style={{ top: `${20 + runningTasks.length * 120}px` }}\n            >\n              <div className=\"task-status-header\">\n                <span>\n                  {parentDecompositionTask.status === 'submitting' && '⏳'}\n                  {parentDecompositionTask.status === 'processing' && '🎬'}\n                  {parentDecompositionTask.status === 'completed' && '✅'}\n                  {parentDecompositionTask.status === 'failed' && '❌'}\n                  {' '}\n                  {parentDecompositionTask.status === 'submitting' && 'Starting decomposition...'}\n                  {parentDecompositionTask.status === 'processing' && 'Decomposing video...'}\n                  {parentDecompositionTask.status === 'completed' && 'Decomposition completed!'}\n                  {parentDecompositionTask.status === 'failed' && 'Decomposition failed!'}\n                </span>\n                <button \n                  onClick={() => setDecompositionTask(null)}\n                  className=\"task-status-close\"\n                  title=\"Dismiss (task continues in background)\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"task-status-content\">\n                <p><strong>Task ID:</strong> {parentDecompositionTask.id.substring(0, 8)}...</p>\n                {parentDecompositionTask.progress && (\n                  <p><strong>Progress:</strong> {parentDecompositionTask.progress.current || 0}/{parentDecompositionTask.progress.total || 100}%</p>\n                )}\n                {parentDecompositionTask.status === 'completed' && (\n                  <p className=\"task-status-note\">✨ Auto-dismiss in 15s</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Recomposition Task Status */}\n          {parentRecompositionTask && (\n            <div \n              className={`task-status-banner task-${parentRecompositionTask.status}`}\n              style={{ top: `${20 + runningTasks.length * 120 + (parentDecompositionTask ? 120 : 0)}px` }}\n            >\n              <div className=\"task-status-header\">\n                <span>\n                  {parentRecompositionTask.status === 'submitting' && '⏳'}\n                  {parentRecompositionTask.status === 'processing' && '🎬'}\n                  {parentRecompositionTask.status === 'completed' && '✅'}\n                  {parentRecompositionTask.status === 'failed' && '❌'}\n                  {' '}\n                  {parentRecompositionTask.status === 'submitting' && 'Starting video recomposition...'}\n                  {parentRecompositionTask.status === 'processing' && 'Recomposing video...'}\n                  {parentRecompositionTask.status === 'completed' && 'Video recomposition completed!'}\n                  {parentRecompositionTask.status === 'failed' && 'Video recomposition failed!'}\n                </span>\n                <button \n                  onClick={() => setRecompositionTask(null)}\n                  className=\"task-status-close\"\n                  title=\"Dismiss (task continues in background)\"\n                >\n                  ✕\n                </button>\n              </div>\n              <div className=\"task-status-content\">\n                <p><strong>Task ID:</strong> {parentRecompositionTask.id.substring(0, 8)}...</p>\n                {parentRecompositionTask.progress && (\n                  <p><strong>Progress:</strong> {parentRecompositionTask.progress.current || 0}/{parentRecompositionTask.progress.total || 100}%</p>\n                )}\n                {parentRecompositionTask.status === 'completed' && (\n                  <p className=\"task-status-note\">✨ Auto-dismiss in 15s</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Selected Frames Banner - Bottom Right Corner */}\n          {selectedFrameNumbers.length > 0 && (\n            <div className={`selected-frames-banner ${bannerCollapsed ? 'collapsed' : ''}`}>\n              <div className=\"banner-header\">\n                <span className=\"banner-title\">Selected Frames: {selectedFrameNumbers.length}</span>\n                <div className=\"banner-controls\">\n                  <button \n                    onClick={() => setBannerCollapsed(!bannerCollapsed)}\n                    className=\"banner-toggle-btn\"\n                    title={bannerCollapsed ? \"Expand banner\" : \"Collapse banner\"}\n                  >\n                    {bannerCollapsed ? '▼' : '▲'}\n                  </button>\n                  <button \n                    onClick={(event) => {\n                      if (selectedFrameNumbers.length > 0) {\n                        const blob = new Blob([selectedFrameNumbers.join('\\n')], { type: 'text/plain' });\n                        const url = URL.createObjectURL(blob);\n                        const a = document.createElement('a');\n                        a.href = url;\n                        a.download = `selected_frames_${repoUuid}.txt`;\n                        document.body.appendChild(a);\n                        a.click();\n                        document.body.removeChild(a);\n                        URL.revokeObjectURL(url);\n                        \n                        // Show brief success feedback\n                        const btn = event.target;\n                        const originalText = btn.innerHTML;\n                        btn.innerHTML = '✓';\n                        btn.style.background = 'rgba(40, 167, 69, 0.8)';\n                        setTimeout(() => {\n                          btn.innerHTML = originalText;\n                          btn.style.background = '';\n                        }, 1000);\n                      }\n                    }}\n                    className=\"banner-download-btn\"\n                    title=\"Download selected frame numbers\"\n                    disabled={selectedFrameNumbers.length === 0}\n                  >\n                    📥\n                  </button>\n                  <button \n                    onClick={() => setSelectedFrames(new Set())}\n                    className=\"banner-clear-btn\"\n                    title=\"Clear all selections\"\n                  >\n                    ✕\n                  </button>\n                </div>\n              </div>\n              {!bannerCollapsed && (\n                <div className=\"banner-content\">\n                  <textarea\n                    value={selectedFrameNumbers.join(', ')}\n                    onChange={(e) => {\n                      const input = e.target.value;\n                      const numbers = input.split(',').map(s => s.trim()).filter(s => s !== '');\n                      const validNumbers = numbers.map(n => {\n                        const num = parseFloat(n);\n                        return isNaN(num) ? null : num;\n                      }).filter(n => n !== null);\n                      setSelectedFrames(new Set(validNumbers));\n                    }}\n                    className=\"banner-textarea\"\n                    placeholder=\"Enter frame numbers separated by commas...\"\n                    rows={3}\n                  />\n                </div>\n              )}\n              <div className=\"banner-run-section\">\n                <button \n                  onClick={async () => {\n                    console.log('🚀 Run button clicked with frames:', selectedFrameNumbers);\n                    \n                    if (selectedFrameNumbers.length === 0) {\n                      alert('Please select frames to process');\n                      return;\n                    }\n                    \n                    // Allow multiple tasks to run concurrently\n                    \n                    const taskId = `temp-${Date.now()}`;\n                    \n                    try {\n                      // Add task to queue with submitting status\n                      setRunningTasks(prev => [...prev, { \n                        id: taskId,\n                        status: 'submitting', \n                        frames: [...selectedFrameNumbers],\n                        startTime: Date.now()\n                      }]);\n                      \n                      // Clear selections immediately\n                      setSelectedFrames(new Set());\n                      \n                      // Submit interpolation job to backend\n                      const response = await fetch(`http://localhost:8500/api/interpolate/${repoUuid}`, {\n                        method: 'POST',\n                        headers: {\n                          'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                          target_frames: selectedFrameNumbers\n                        })\n                      });\n                      \n                      if (response.ok) {\n                        const result = await response.json();\n                        console.log('✅ Interpolation job submitted:', result);\n                        \n                        // Update task with real ID and running status\n                        setRunningTasks(prev => prev.map(task => \n                          task.id === taskId \n                            ? { ...task, id: result.task_id, status: 'running' }\n                            : task\n                        ));\n                        \n                        // Start polling for this specific task\n                        pollTaskStatus(result.task_id, repoUuid);\n                        \n                        console.log(`✅ Task ${result.task_id} started for ${selectedFrameNumbers.length} frames`);\n                        \n                      } else {\n                        const error = await response.text();\n                        console.error('❌ Interpolation failed:', error);\n                        alert(`❌ Failed to start interpolation: ${error}`);\n                        \n                        // Remove failed task\n                        setRunningTasks(prev => prev.filter(task => task.id !== taskId));\n                      }\n                      \n                    } catch (error) {\n                      console.error('❌ Network error:', error);\n                      alert(`❌ Network error: ${error.message}`);\n                      \n                      // Remove failed task\n                      setRunningTasks(prev => prev.filter(task => task.id !== taskId));\n                    }\n                  }}\n                  className=\"banner-run-btn\"\n                  title=\"Run interpolation on selected frames\"\n                  disabled={selectedFrameNumbers.length === 0}\n                >\n                  🚀 Run Interpolation\n                </button>\n              </div>\n            </div>\n          )}\n\n          <div className=\"frames-grid\" key={`frames-${forceRefreshCounter}-${currentPage}`}>\n            {frames.map((framePath, index) => {\n              const frameNumber = frameNumbers[index] !== undefined ? frameNumbers[index] : (currentPage - 1) * framesPerPage + index + 1;\n              const isSelected = selectedFrames.has(frameNumber);\n              \n              return (\n                <div \n                  key={index} \n                  className={`frame-container ${isSelected ? 'selected' : ''}`}\n                  onClick={() => toggleFrameSelection(frameNumber)}\n                  style={{ cursor: 'pointer' }}\n                >\n                <img \n                  src={`http://localhost:8500/${framePath}?cb=${cacheBuster}&fc=${forceRefreshCounter}`}\n                    alt={`Frame ${frameNumber}`}\n                  className=\"frame-image\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    console.error(`Failed to load image: ${framePath}`);\n                    e.target.style.display = 'none';\n                  }}\n                />\n                <div className=\"frame-info\">\n                    {frameNumber}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {totalFrames > framesPerPage && (\n            <div className=\"pagination\">\n              <button \n                onClick={goToPrevPage} \n                disabled={currentPage === 1}\n                className=\"page-button\"\n              >\n                ← Previous\n              </button>\n              \n              <div className=\"page-numbers\">\n                {Array.from({ length: Math.ceil(totalFrames / framesPerPage) }, (_, i) => i + 1)\n                  .filter(page => page === 1 || page === Math.ceil(totalFrames / framesPerPage) ||\n                                 (page >= currentPage - 2 && page <= currentPage + 2))\n                  .map((page, index, array) => (\n                    <React.Fragment key={page}>\n                      {index > 0 && array[index - 1] !== page - 1 && (\n                        <span className=\"page-ellipsis\">...</span>\n                      )}\n                      <button\n                        onClick={() => goToPage(page)}\n                        className={`page-button ${currentPage === page ? 'active' : ''}`}\n                      >\n                        {page}\n                      </button>\n                    </React.Fragment>\n                  ))}\n              </div>\n              \n              <button \n                onClick={goToNextPage} \n                disabled={currentPage === Math.ceil(totalFrames / framesPerPage)}\n                className=\"page-button\"\n              >\n                Next →\n              </button>\n            </div>\n          )}\n        </>\n      )}\n\n      {error && (\n        <div className=\"error\">\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  const [decompositionTask, setDecompositionTask] = useState(null);\n  const [recompositionTask, setRecompositionTask] = useState(null);\n  const [pollDecompositionStatus, setPollDecompositionStatus] = useState(null);\n  const [pollRecompositionStatus, setPollRecompositionStatus] = useState(null);\n\n  const handleUploadComplete = useCallback((response) => {\n    // Start tracking decomposition task if backend uses Celery\n    if (response.task_id) {\n      console.log(`🎬 Decomposition task started: ${response.task_id}`);\n      setDecompositionTask({\n        id: response.task_id,\n        status: 'processing',\n        startTime: Date.now()\n      });\n      // Start polling for decomposition task status\n      if (pollDecompositionStatus) {\n        pollDecompositionStatus(response.task_id, response.uuid);\n      } else {\n        // If polling function is not available yet, store the task info for later\n        console.log(`⏳ Polling function not available yet, will start polling when FrameDisplay loads`);\n      }\n    }\n  }, [pollDecompositionStatus]);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<UploadInterface onUploadComplete={handleUploadComplete} />} />\n      <Route path=\"/:repoUuid\" element={<FrameDisplay setDecompositionTask={setDecompositionTask} setPollDecompositionStatus={setPollDecompositionStatus} decompositionTask={decompositionTask} setRecompositionTask={setRecompositionTask} setPollRecompositionStatus={setPollRecompositionStatus} recompositionTask={recompositionTask} />} />\n    </Routes>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}